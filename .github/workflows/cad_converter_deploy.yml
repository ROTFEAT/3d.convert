name: 部署CAD转换服务

on:
  push:
    branches: [ main ]  # 当推送到 main 分支时触发
  workflow_dispatch:    # 允许手动触发工作流

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        
      # 我们会依赖Docker Hub仓库创建步骤来验证是否首次运行
      # 所以这个步骤不再需要
        
      - name: 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: 登录到 Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: 在Docker Hub上创建仓库（如果不存在）
        run: |
          # 检查Docker是否可以登录
          echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
          if [ $? -ne 0 ]; then
            echo "Docker登录失败，请检查凭据"
            exit 1
          fi
          
          # 拉取hello-world基础镜像
          docker pull hello-world:latest
          
          # 创建仓库前先检查权限
          echo "验证Docker Hub权限..."
          
          # 创建API仓库
          echo "创建或确认API仓库存在..."
          if ! docker pull ${{ secrets.DOCKER_USERNAME }}/cad-converter-api:latest 2>/dev/null; then
            echo "仓库不存在，创建初始镜像..."
            docker tag hello-world:latest ${{ secrets.DOCKER_USERNAME }}/cad-converter-api:latest
            docker push ${{ secrets.DOCKER_USERNAME }}/cad-converter-api:latest || {
              echo "无法推送镜像，请检查用户名和权限"
              exit 1
            }
          fi
          
          # 创建Worker仓库
          echo "创建或确认Worker仓库存在..."
          if ! docker pull ${{ secrets.DOCKER_USERNAME }}/cad-converter-worker:latest 2>/dev/null; then
            echo "仓库不存在，创建初始镜像..."
            docker tag hello-world:latest ${{ secrets.DOCKER_USERNAME }}/cad-converter-worker:latest
            docker push ${{ secrets.DOCKER_USERNAME }}/cad-converter-worker:latest || {
              echo "无法推送镜像，请检查用户名和权限"
              exit 1
            }
          fi
          
      - name: 构建并推送 API 镜像
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/cad-converter-api:latest
          # 不使用缓存以避免权限问题
          no-cache: true
      
      - name: 构建并推送 Worker 镜像
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.worker
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/cad-converter-worker:latest
          # 不使用缓存以避免权限问题
          no-cache: true
          build-args: |
            BASE_IMAGE=wyxsg/freecad-python
          
      - name: 生成 .env 文件
        run: |
          cat > .env << EOL
          R2_ACCOUNT_ID=${{ secrets.R2_ACCOUNT_ID }}
          R2_ACCESS_KEY_ID=${{ secrets.R2_ACCESS_KEY_ID }}
          R2_SECRET_ACCESS_KEY=${{ secrets.R2_SECRET_ACCESS_KEY }}
          R2_BUCKET_NAME=${{ secrets.R2_BUCKET_NAME }}
          R2_PUBLIC_URL=${{ secrets.R2_PUBLIC_URL }}
          DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
          EOL
      
      - name: 确保目标目录存在
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            # 先检查目录是否存在，不存在则创建
            if [ ! -d "/opt/cad-converter" ]; then
              # 尝试直接创建
              mkdir -p /opt/cad-converter || true
              
              # 如果创建失败，尝试用sudo创建
              if [ ! -d "/opt/cad-converter" ]; then
                sudo mkdir -p /opt/cad-converter
                sudo chown $USER:$USER /opt/cad-converter
              fi
            fi
            
            # 确认目录权限
            sudo chmod 755 /opt/cad-converter
      
      - name: 将配置文件复制到服务器
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          source: "docker-compose.yml,.env"
          target: "/home/${{ secrets.SERVER_USERNAME }}"
          overwrite: true
          
      - name: 验证镜像可访问性
        run: |
          # 确认构建的镜像可以被公开访问
          echo "验证API镜像可以被拉取..."
          docker rmi ${{ secrets.DOCKER_USERNAME }}/cad-converter-api:latest || true
          docker pull ${{ secrets.DOCKER_USERNAME }}/cad-converter-api:latest
          
          echo "验证Worker镜像可以被拉取..."
          docker rmi ${{ secrets.DOCKER_USERNAME }}/cad-converter-worker:latest || true
          docker pull ${{ secrets.DOCKER_USERNAME }}/cad-converter-worker:latest
          
          echo "两个镜像都可以成功从Docker Hub拉取！"
      
      - name: 部署到云服务器
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            # 复制文件到目标目录
            sudo cp -f /home/${{ secrets.SERVER_USERNAME }}/docker-compose.yml /opt/cad-converter/
            sudo cp -f /home/${{ secrets.SERVER_USERNAME }}/.env /opt/cad-converter/
            
            # 确保权限正确
            sudo chown -R $USER:$USER /opt/cad-converter
            
            # 进入工作目录
            cd /opt/cad-converter
            
            # 列出当前Docker镜像
            echo "当前Docker镜像列表:"
            docker images
            
            # 拉取最新镜像
            echo "拉取API镜像..."
            docker pull ${{ secrets.DOCKER_USERNAME }}/cad-converter-api:latest
            echo "拉取Worker镜像..."
            docker pull ${{ secrets.DOCKER_USERNAME }}/cad-converter-worker:latest
            
            # 确认镜像已经拉取
            echo "拉取后的Docker镜像列表:"
            docker images | grep "${{ secrets.DOCKER_USERNAME }}"
            
            # 停止并删除旧容器
            docker-compose down || true
            
            # 修改docker-compose文件中的镜像为最新拉取的镜像
            # 处理API服务
            sed -i '/api:/,/worker:/ s|build:|image: ${{ secrets.DOCKER_USERNAME }}/cad-converter-api:latest|g' docker-compose.yml
            sed -i '/api:/,/worker:/ s|dockerfile: Dockerfile|# dockerfile: Dockerfile|g' docker-compose.yml
            
            # 处理Worker服务
            sed -i '/worker:/,/networks:/ s|build:|image: ${{ secrets.DOCKER_USERNAME }}/cad-converter-worker:latest|g' docker-compose.yml
            sed -i '/worker:/,/networks:/ s|dockerfile: Dockerfile.worker|# dockerfile: Dockerfile.worker|g' docker-compose.yml
            
            # 打印修改后的docker-compose文件以便调试
            echo "修改后的docker-compose文件内容:"
            cat docker-compose.yml
            
            # 确保容器的重启策略设置正确
            grep -q "restart: unless-stopped" docker-compose.yml || sed -i "s|restart: always|restart: unless-stopped|g" docker-compose.yml
            
            # 创建必要的目录
            mkdir -p ./tmp
            
            # 检查docker-compose的配置
            echo "检查docker-compose配置..."
            docker-compose config
            
            # 使用docker-compose启动服务
            echo "启动服务..."
            docker-compose up -d
            
            # 查看运行的容器
            echo "运行中的容器:"
            docker-compose ps
            
            # 清理用户主目录中的临时文件
            rm -f /home/${{ secrets.SERVER_USERNAME }}/docker-compose.yml
            rm -f /home/${{ secrets.SERVER_USERNAME }}/.env 